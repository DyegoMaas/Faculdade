package omp.exemplos;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.channels.FileChannel;

import javax.swing.JFileChooser;



import jomp.compiler.*;

public class ConversorJomp3_jomp {

    public static void main(String[] args) {
        String fileName;
   
        JFileChooser choose = new JFileChooser();
        choose.setCurrentDirectory(new java.io.File("."));
        
        choose.showDialog(null, "Conveter...");
        fileName = choose.getSelectedFile().getPath();
        
        System.out.println("Origem - " + fileName);
        File oldFile = new File(fileName);
        
        fileName = fileName.substring(0, fileName.indexOf('.')) + "_jomp";
        File newFile = new File(fileName + ".jomp");
        
        try {
            copyFile2(oldFile, newFile);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        //compila arquivo .jomp
        String[] s = new String[1];
        s[0] = fileName;
        Jomp.main(s);
        System.out.println("Destino - " + fileName + ".java");

    }
    
    
    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if(!destFile.exists()) {
         destFile.createNewFile();
        }

        FileChannel source = null;
        FileChannel destination = null;
        try {
         source = new FileInputStream(sourceFile).getChannel();
         destination = new FileOutputStream(destFile).getChannel();
         destination.transferFrom(source, 0, source.size());
        }
        finally {
         if(source != null) {
          source.close();
         }
         if(destination != null) {
          destination.close();
         }
       }
    }
    
    public static void copyFile2(File sourceFile, File destFile) throws IOException {
    	
    	String className = null;
        BufferedReader reader = new BufferedReader(new FileReader(sourceFile));
        BufferedWriter writer = new BufferedWriter(new FileWriter(destFile));

        //... Loop as long as there are input lines.
        String line = null;
        while ((line=reader.readLine()) != null) {
        	
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jompi_jompf_jomp _jomp(_jompl_jompi_jompn_jompe_jomp._jompc_jompo_jompn_jompt_jompa_jompi_jompn_jomps_jomp(_jomp"_jompp_jompu_jompb_jompl_jompi_jompc_jomp _jompc_jompl_jompa_jomps_jomps_jomp"_jomp)_jomp)_jomp _jomp{_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp	_jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp _jomp=_jomp _jompl_jompi_jompn_jompe_jomp._jomps_jompp_jompl_jompi_jompt_jomp(_jomp"_jomp _jomp"_jomp)_jomp[_jomp2_jomp]_jomp;_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp	_jomp/_jomp/_jompS_jompy_jomps_jompt_jompe_jompm_jomp._jompo_jompu_jompt_jomp._jompp_jompr_jompi_jompn_jompt_jompl_jompn_jomp(_jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp)_jomp;_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp}_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jompi_jompf_jomp _jomp(_jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp _jomp!_jomp=_jomp _jompn_jompu_jompl_jompl_jomp _jomp&_jomp&_jomp _jompl_jompi_jompn_jompe_jomp._jompc_jompo_jompn_jompt_jompa_jompi_jompn_jomps_jomp(_jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp)_jomp)_jomp _jomp{_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp	_jompS_jompy_jomps_jompt_jompe_jompm_jomp._jompo_jompu_jompt_jomp._jompp_jompr_jompi_jompn_jompt_jompl_jompn_jomp(_jomp"_jomps_jompu_jompb_jomps_jompt_jomp _jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp _jomp"_jomp _jomp+_jomp _jompl_jompi_jompn_jompe_jomp)_jomp;_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp	_jompl_jompi_jompn_jompe_jomp _jomp=_jomp _jompl_jompi_jompn_jompe_jomp._jompr_jompe_jompp_jompl_jompa_jompc_jompe_jomp(_jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp,_jomp _jompc_jompl_jompa_jomps_jomps_jompN_jompa_jompm_jompe_jomp _jomp+_jomp _jomp"_jomp__jompj_jompo_jompm_jompp_jomp"_jomp)_jomp;_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp}_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp	_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jompw_jompr_jompi_jompt_jompe_jompr_jomp._jompw_jompr_jompi_jompt_jompe_jomp(_jompl_jompi_jompn_jompe_jomp)_jomp;_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jompw_jompr_jompi_jompt_jompe_jompr_jomp._jompn_jompe_jompw_jompL_jompi_jompn_jompe_jomp(_jomp)_jomp;_jomp _jomp _jomp _jomp/_jomp/_jomp _jompW_jompr_jompi_jompt_jompe_jomp _jomps_jompy_jomps_jompt_jompe_jompm_jomp _jompd_jompe_jompp_jompe_jompn_jompd_jompe_jompn_jompt_jomp _jompe_jompn_jompd_jomp _jompo_jompf_jomp _jompl_jompi_jompn_jompe_jomp._jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp}_jomp
_jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp/_jomp/_jomp._jomp._jomp._jomp _jompC_jompl_jompo_jomps_jompe_jomp _jompr_jompe_jompa_jompd_jompe_jompr_jomp _jompa_jompn_jompd_jomp _jompw_jompr_jompi_jompt_jompe_jompr_jomp._jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jompr_jompe_jompa_jompd_jompe_jompr_jomp._jompc_jompl_jompo_jomps_jompe_jomp(_jomp)_jomp;_jomp _jomp _jomp/_jomp/_jomp _jompC_jompl_jompo_jomps_jompe_jomp _jompt_jompo_jomp _jompu_jompn_jompl_jompo_jompc_jompk_jomp._jomp
_jomp _jomp _jomp _jomp _jomp _jomp _jomp _jomp _jompw_jompr_jompi_jompt_jompe_jompr_jomp._jompc_jompl_jompo_jomps_jompe_jomp(_jomp)_jomp;_jomp _jomp _jomp/_jomp/_jomp _jompC_jompl_jompo_jomps_jompe_jomp _jompt_jompo_jomp _jompu_jompn_jompl_jompo_jompc_jompk_jomp _jompa_jompn_jompd_jomp _jompf_jompl_jompu_jomps_jomph_jomp _jompt_jompo_jomp _jompd_jompi_jomps_jompk_jomp._jomp
_jomp _jomp _jomp _jomp _jomp}_jomp
_jomp _jomp _jomp _jomp _jomp
_jomp _jomp _jomp _jomp _jomp
_jomp}_jomp
_jomp _jomp _jomp _jomp _jomp
